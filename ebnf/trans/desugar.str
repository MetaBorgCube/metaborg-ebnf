module desugar

imports

  src-gen/signatures/Common-sig
  src-gen/signatures/ebnf-sig

strategies

  desugar-basic = bottomup(try(desugar))
  desugar-advanced = bottomup(try(desugar-adv))
  
rules

  desugar: Delimiter("\\|") -> Terminal("|")
  desugar: Delimiter(d) -> Terminal(d)

  desugar: Repetition(Identifier(i)) -> Repetition(Seq([Identifier(i)]))
  desugar: Sequence(Seq(l1), Seq(l2)) -> Seq(<concat> [l1, l2])
  desugar: Sequence(a, Seq(l2)) -> Seq(<concat> [[a], l2])
  desugar: Sequence(Seq(l1), b) -> Seq(<concat> [l1, [b]])
  desugar: Sequence(a, b) -> Seq([a, b])
  
signature constructors

  Seq : List(Term) -> Term
  
rules

  desugar-adv: Seq(l) -> RepetitionOne(Delimiter(d), Seq(t))
  	where
  	  (fst, snd, _)		:= <split-fetch-keep(is-rep)> l
  	; Repetition(Seq([Terminal(d)| t])) := snd
  	; n					:= <tmap(length); subt> (fst, t)
  	; mtch				:= <split-at(|n); Snd> fst
  	; <equal> (mtch, t)

  desugar-adv: Seq(l) -> RepetitionOne(Seq(t))
  	where
  	  (fst, snd, _)		:= <split-fetch-keep(is-rep)> l
  	; Repetition(Seq(t)):= snd
  	; n					:= <tmap(length); subt> (fst, t)
  	; mtch				:= <split-at(|n); Snd> fst
  	; <equal> (mtch, t)
  	  
  is-rep: Repetition(s) -> Repetition(s)
  
signature constructors

  RepetitionOne : Term * Term -> Term
  RepetitionOne : Term -> Term