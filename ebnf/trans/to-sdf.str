module to-sdf

imports
  signatures/ebnf-sig
  libspoofax/stratego/debug
  desugar

rules
  to-sdf: (Modules(mods), path) ->  (<concat> [filepaths, [mainfilename]], <concat> [files, [mainfile]])
    with
      modules					:= <map(to-sdf)> mods
      ; filenames			:= <unzip; Fst> modules
      ; filepaths			:= <map(format-filename(|path))> filenames
      ; imports				:= <map(split-at-dot; Fst)> filenames
      ; files					:= <map(format-module(|imports))> modules
      ; (mainfilename, mainfile)	:= <format-mainfile> (path, imports)
      
  to-sdf: (Grammar(starts, defs), path) -> (filepath, file)
    with
      	modulename		:= <split-after; Snd; split-at-dot; Fst> (path, "/")
      ; filename 			:= <guarantee-extension(|"sdf3")> modulename
      ; filepath			:= <format-filename(|path)> filename
      ; mod						:= <to-sdf> Module(modulename, starts, defs)
      ; file					:= <format-module(|[])> mod
      
  to-sdf: Module(name, starts, defs) -> (filename, (starts, syntax))
    with
	    syntax			:= <map(to-sdf)> defs
	    ; filename	:= <guarantee-extension(|"sdf3")> name
	
	format-filename(|path): filename -> <concat-strings> [<split-before; Fst> (path, "/"), "/src-gen/", filename]
			    
	format-mainfile: (path, imports) -> (mainfilepath, mainfile)
		with
			mainmodule			:= <split-after; Snd; split-at-dot; Fst> (path, "/")
			;	mainfilename	:= <guarantee-extension(|"sdf3")> mainmodule
			; mainfilepath	:= <format-filename(|path)> mainfilename
			; mainfile			:=	<format-module(|imports)> (mainmodule, (None(), []))
			
	format-module(|imports): (filename, (starts, syntax)) -> template
		with 
		modulename				:= <split-at-dot; Fst> filename
		; importsTrimmed	:= <remove-all(equal(|modulename))> imports
		; template 				:= $[module [modulename]
	
	imports
	
		[<map(to-multlined)> importsTrimmed]
	
[<to-start-symbols> starts]
	
	context-free syntax
	
		[syntax]
]

  to-multlined: i -> $[[i]
  ]
  
rules
  
  // Get the start symbols as defined in the EBNF
  to-start-symbols: Some(StartSymbols(startsRaw)) -> template
  	with
  	  names 		:= <map(to-start-symbol)> startsRaw
  	; sorted 		:= <sort-list(LSort(gt))> names
  	; uniq 			:= <uniq> sorted
  	; format 		:= <map(format-identifier)> uniq
  	; starts 		:= <map(to-spaced); concat> format
  	; template 	:= $[
context-free start-symbols

  [starts]]
  to-start-symbols: None() -> ""
  
  to-spaced: i -> [i, " "]
  to-start-symbol: name -> $[[name]]
  
rules

  // Creates a rule for each returned underlying grammar
  to-sdf: Definition(LhsIdentifier(i), Rhs(r)) -> <concat-strings> [defResult, repsResult, $[
  ]]
    with
      iden 						:= <format-identifier> i
    	; (prods, reps)		  	:= <to-sdf> r
		; defResult  			:= <map(format-definition(|iden)); concat-strings> prods
		; repsResult			:= <map(format-repitition-definition(|iden)); concat-strings> reps
	
  format-definition(|i): r -> $[[i].[constr] = [r]
  ]
    with
      constr := <newname> i

  format-repitition-definition(|i): (repIden, [body|[]]) -> $[[repIden].[constr] = [body]
  ]
    with  constr := <concat-strings; newname> [i, repIden]
  format-repitition-definition(|i): (repIden, [body|t]) -> <concat-strings> r
    with r := [<format-repitition-definition(|i)> (repIden, [body]),<format-repitition-definition(|i)> (repIden, t)]
      
  // Combines both options from the underlying grammar
  to-sdf: Choice(t1, t2) -> (<concat> [defs1, defs2] , <concat> [reps1, reps2])
    with
      	(defs1, reps1) 	:= <to-sdf> t1
      ; (defs2, reps2) 	:= <to-sdf> t2

  // Adds an empty option for the grammar
  to-sdf: Option(Identifier(i)) -> ([$[[<format-identifier> i]?]], [])
  to-sdf: Option(t) -> ([$[]|defs] , reps)
    with
      (defs, reps) 	:= <to-sdf> t

  to-sdf: Rep(Sep(d), [Identifier(i)],  q) -> ([$[{[<format-identifier> i] "[d]"}[<to-quant> q]]], [])
  to-sdf: Rep(Sep(d), r, q) -> ([$[{[repIden] "[d]"}[<to-quant> q]]], <concat> [reps, [(repIden, repBody)]])
    with (res, reps) := <to-sdf> Seq(r)
    ;	 repBody	 := res
    ;	 repIden	 := <newname> "Repitition"
  to-sdf: Rep(None(), [Identifier(i)], q) -> ([$[[<format-identifier> i][<to-quant> q]]], [])
  to-sdf: Rep(None(), r, q) -> ([$[[repIden][<to-quant> q]]], <concat> [reps, [(repIden, repBody)]])
    with (res, reps) := <to-sdf> Seq(r)
    ; repBody		 := res
    ; repIden		 := <newname> "Repitition"
    
  to-quant: Star() -> $[*]
  to-quant: One() -> $[+]

  // Creates options of all possible combinations considered in the underlying grammars
  to-sdf: Seq(s) -> (d, repsr)
    with
      (defs, reps)	:= <map(to-sdf); unzip> s
      ; d			:= <list-combinations; map(flatten-list); map(format-sequence)> defs
      ; repsr		:= <flatten-list; filter(is-tuple)> reps
  format-sequence: [a | t] -> $[[a] [<format-sequence> t]]
  format-sequence: [a | []] -> $[[a]]

  to-sdf: Identifier(i) -> ([$[[<format-identifier> i]]], [])
  to-sdf: String(s) -> ([$["[s]"]], [])
  to-sdf: Keyword(k) -> ([$["[k]"]], [])
  
  // Uppercases the first letter and removes the trailing _,
  // if the string has a double _, only the part after that is used
  format-identifier: i -> name
  	where
  	  <is-substring(!"__")> i
	  ; name := <split-after; Snd; format-identifier> (i, "__")
	  
  format-identifier: i -> name
    with
    not (<is-substring(!"__")> i)
       ;chars  		:= <explode-string> i
      ; split  		:=  <split-at(|1)> chars // Splits at index 1 into two tuples
      ; first  		:= <Fst; index(|1); to-upper> split // Gets the first character and uppercases it
      ; name   		:= <implode-string; string-replace(|"_", "")> [first|<Snd> split]