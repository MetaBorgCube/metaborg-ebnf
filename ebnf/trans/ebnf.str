module ebnf

imports
  
  completion/completion
  pp
  outline
  analysis
  signatures/ebnf-sig
  libspoofax/stratego/debug

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-sdf3:
  	(node, _, _, path, project-path) -> (filename, result)
  	with
  	  filename := <guarantee-extension(|"sdf3")> path
  	; result   := <to-sdf> (node, path)
  	
  to-sdf: (Grammar(list), path) -> template
  with
    file := <split-at-dot; Fst> path
  ; template := $[module [file]

context-free start-symbols
  
  [<to-start-symbols> list]

context-free syntax
  
  [<map(to-sdf)> list]]
  
rules
  
  // Extracts all the left-hand side start symbols from the grammar
  to-start-symbols: defs -> starts
  	with
  	  names := <map(to-start-symbol)> defs
  	; sorted := <sort-list(LSort(gt))> names
  	; uniq := <uniq> sorted
  	; format := <map(format-identifier)> uniq
  	; starts := <map(to-spaced); concat> format
  to-spaced: i -> [i, " "]
  to-start-symbol: Definition(LhsIdentifier(name), _) -> $[[name]]
  
rules
  
  // Creates a rule for each returned underlying grammar
  to-sdf: Definition(LhsIdentifier(i), Rhs(r)) -> res
    with
      iden := <format-identifier> i
    ; rhs  := <to-sdf> r
	; res  := <map(format-definition(|iden)); concat-strings> rhs
  format-definition(|i): r -> $[[i].[constr] = <[r]>
  ]
    with
      constr := <newname> i
      
  // Combines both options from the underlying grammar
  to-sdf: Choice(o1, o2) -> <concat> [<to-sdf> o1, <to-sdf> o2]

  // Adds an empty option for the grammar
  to-sdf: Option(o) -> [$[]|<to-sdf> o]

// TODO: Implement repetition
//  to-sdf: Repetition(r) -> $[[]]

  // Creates options of all possible combinations considered in the underlying grammars
  to-sdf: Sequence(s1, s2) -> res
    with
      res := <list-combinations; map(format-sequence)> [<to-sdf> s1, <to-sdf> s2]
  format-sequence: [a, b] -> $[[a] [b]]

  to-sdf: Identifier(i) -> [$[<[<format-identifier> i]>]]
  to-sdf: Terminal(t) -> [$[[t]]]
  to-sdf: Delimiter(d) -> [$[[d]]]
  
  // Uppercases the first letter and removes the trailing _
  format-identifier: i -> name
    with
      chars  		:= <explode-string> i
      ; split  		:=  <split-at(|1)> chars // Splits at index 1 into two tuples
      ; first  		:= <Fst; index(|1); to-upper> split // Gets the first character and uppercases it
      ; name   		:= <implode-string; string-replace(|"_", "")> [first|<Snd> split]
  
  