module ebnf

imports
  
  completion/completion
  pp
  outline
  analysis

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-sdf3:
  	(node, _, _, path, project-path) -> (filename, result)
  	with
  	  filename := <guarantee-extension(|"sdf3")> path
  	; result   := <to-sdf> (node, path)
  	
  to-sdf: (Grammar(list), path) -> template
  with
    file := <split-at-dot; Fst> path
  ; template := $[module [file]

context-free start-symbols
  
  [<to-start-symbols> list]

context-free syntax
  
  [<map(to-sdf)> list]]
  
rules
  
  // Extracts all the left-hand side start symbols from the grammar
  to-start-symbols: defs -> starts
  	with
  	  names := <map(to-start-symbol)> defs
  	; sorted := <sort-list(LSort(gt))> names
  	; uniq := <uniq> sorted
  	; format := <map(format-identifier)> uniq
  	; starts := <map(to-spaced); concat> format
  to-spaced: i -> [i, " "]
  to-start-symbol: Definition(LhsIdentifier(name), _) -> $[[name]]
  
rules
  
  to-sdf: Definition(LhsIdentifier(i), Rhs(rhs)) -> $[[<format-identifier> i] = <[<to-sdf> rhs]>
  ]
  
//  to-sdf: Choice(o1, o2) -> [$[[<to-sdf> o1]], $[[<to-sdf> o2]]]
//  to-sdf: Option(o) -> [$[], $[[o]]]
//  to-sdf: Repetition(r) -> $[]
  to-sdf: Sequence(s1, s2) -> $[[<to-sdf> s1] [<to-sdf> s2]]

  to-sdf: Identifier(i) -> $[<[<format-identifier> i]>]
  to-sdf: Terminal(t) -> $[[t]]
  to-sdf: Delimiter(d) -> $[[d]]
  
//  check-list: [h|t] -> 
//  check-list: 
  
  // Uppercases the first letter and removes the trailing _
  format-identifier: i -> name
    with
      chars  := <explode-string> i
      ; split  := <split-at(|1)> chars // Splits at index 1 into two tuples
      ; first  := <Fst; index(|1); to-upper> split // Gets the first character and uppercases it
      ; length := <Snd; implode-string; string-length; int-subt(|1)> split // Gets the length of the remaining part
      ; end    := <Snd; split-at(|length); Fst> split // Splits at second to last character and selects the first part
      ; name   := <implode-string> [first|end] // Joins the two strings into a single word again
  
  
  