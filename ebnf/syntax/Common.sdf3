module Common

lexical syntax
 
  Upper         = [A-Z]
  Lower         = [a-z]

  Character     = Lower | Upper
  Digit         = [0-9]
  
  ModuleName    = (Upper Lower*) ("-" Upper Lower*)*
  ID            = Lower+ "_" (Lower | "_")*
  Terminal      = (Character)+ | Digit
  Keyword       = "By_Entry" | "By_Protected_Procedure"
  
  Delimiter         = SingleDelimiter | CompoundDelimiter
  SingleDelimiter   = "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "!" | "#" | "\"" | "'" | "\\|"
  CompoundDelimiter = "=>" | ".." | ":=" | "/=" | ">=" | "<=" | "<<" | ">>" | "<>" | "--" | "**"
  
  Letters = (Delimiter | Terminal)+
  
  LAYOUT = [\ \t\n\r] 

  LAYOUT      = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF  = [\n\r] 
  NewLineEOF  = EOF 
  EOF         =  

  ID        = "By_Entry" {reject}
  ID        = "By_Protected_Procedure" {reject}
  Terminal  = "module" {reject}
  Terminal  = "context-free" {reject}
  Terminal  = "start-symbols" {reject}

lexical restrictions

  // Ensure greedy matching for lexicals
  
  ID          -/- [a-zA-Z\_]
  ModuleName  -/- [a-z\_]
  Terminal    -/- [a-z]
  Delimiter   -/- [\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\!]
  // EOF may not be followed by any char
  
  EOF -/- ~[]
  
context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]