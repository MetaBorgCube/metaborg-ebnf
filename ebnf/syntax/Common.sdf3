module Common

lexical syntax
 
  Upper			 = [A-Z]
  Lower			 = [a-z]

  Character		 = Lower | Upper
  Digit			 = [0-9]
  
  ID             = Lower+ "_" (Lower | "_")*
  Terminal		 = (Character)+ | Digit
  
  Delimiter         = SingleDelimiter | CompoundDelimiter
  SingleDelimiter   = "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "!" | "#" | "\"" | "'"
  CompoundDelimiter = "=>" | ".." | ":=" | "/=" | ">=" | "<=" | "<<" | ">>" | "<>" | "--"

  LAYOUT         = [\ \t\n\r] 

  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical restrictions

  // Ensure greedy matching for lexicals
  
  ID	        -/- [a-zA-Z\_]
  Terminal		-/- [a-z]
  Delimiter     -/- [\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\!]
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
