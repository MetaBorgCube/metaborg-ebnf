pragma_ ::= pragma identifier_ [(pragma_argument_association {, pragma_argument_association})];

pragma_argument_association ::=
                            [pragma_argument__identifier =>] name_
                            | [pragma_argument__identifier =>] expression_
                            | pragma_argument__aspect_mark => name_
                            | pragma_argument__aspect_mark => expression_

basic_declaration ::=
                  type_declaration
                  | object_declaration
                  | subprogram_declaration
                  | null_procedure_declaration
                  | package_declaration
                  | exception_declaration
                  | generic_instantiation
                  | subtype_declaration
                  | number_declaration
                  | abstract_subprogram_declaration
                  | expression_function_declaration
                  | renaming_declaration
                  | generic_declaration

defining_identifier ::= identifier_

type_declaration ::= full_type_declaration
                 | incomplete_type_declaration
                 | private_type_declaration
                 | private_extension_declaration

full_type_declaration ::=
                      type defining_identifier [known_discriminant_part] is type_definition
                      [aspect_specification];
                      | task_type_declaration
                      | protected_type_declaration

type_definition ::=
                enumeration_type_definition
                | real_type_definition
                | record_type_definition
                | derived_type_definition
                | integer_type_definition
                | array_type_definition
                | access_type_definition
                | interface_type_definition

subtype_declaration ::=
                    subtype defining_identifier is subtype_indication
                    [aspect_specification];

subtype_indication ::= [null_exclusion] subtype_mark [constraint_]

subtype_mark ::= subtype_name

constraint_ ::= scalar_constraint | composite_constraint

scalar_constraint ::= range_constraint | digits_constraint | delta_constraint

composite_constraint ::= index_constraint | discriminant_constraint

object_declaration ::=
                   defining_identifier_list : [aliased] [constant] subtype_indication [:= expression_]
                   [aspect_specification];
                   | defining_identifier_list : [aliased] [constant] access_definition [:= expression_]
                   [aspect_specification];
                   | defining_identifier_list : [aliased] [constant] array_type_definition [:= expression_]
                   [aspect_specification];
                   | single_task_declaration
                   | single_protected_declaration

defining_identifier_list ::= defining_identifier {, defining_identifier}

number_declaration ::= defining_identifier_list : constant := static__expression ;

derived_type_definition ::= [abstract] [limited] new parent__subtype_indication [[and interface_list] record_extension_part]

range_constraint ::= range range_

range_ ::= range_attribute_reference
      | simple_expression .. simple_expression

enumeration_type_definition ::= (enumeration_literal_specification {, enumeration_literal_specification})

enumeration_literal_specification ::= defining_identifier | defining_character_literal

defining_character_literal ::= character_literal

integer_type_definition ::= signed_integer_type_definition | modular_type_definition

signed_integer_type_definition ::= range static__simple_expression .. static__simple_expression

modular_type_definition ::= mod static__expression

real_type_definition ::= floating_point_definition | fixed_point_definition

floating_point_definition ::= digits static__expression [real_range_specification]

real_range_specification ::= range static__simple_expression .. static__simple_expression

fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition

ordinary_fixed_point_definition ::= delta static__expression real_range_specification

decimal_fixed_point_definition ::= delta static__expression digits static__expression [real_range_specification]

digits_constraint ::= digits static__expression [range_constraint]

array_type_definition ::= unconstrained_array_definition | constrained_array_definition

unconstrained_array_definition ::= array(index_subtype_definition {, index_subtype_definition}) of component_definition

index_subtype_definition ::= subtype_mark range <>

constrained_array_definition ::= array (discrete_subtype_definition {, discrete_subtype_definition}) of component_definition

discrete_subtype_definition ::= discrete__subtype_indication | range_

component_definition ::= [aliased] subtype_indication
                     | [aliased] access_definition

index_constraint ::= (discrete_range {, discrete_range})

discrete_range ::= discrete__subtype_indication | range_

discriminant_part ::= unknown_discriminant_part | known_discriminant_part

unknown_discriminant_part ::= (<>)

known_discriminant_part ::= (discriminant_specification {; discriminant_specification})

discriminant_specification ::= defining_identifier_list : [null_exclusion] subtype_mark [:= default_expression]
                           | defining_identifier_list : access_definition [:= default_expression]

default_expression ::= expression_

discriminant_constraint ::= (discriminant_association {, discriminant_association})

discriminant_association ::= [discriminant__selector_name {| discriminant__selector_name} =>] expression_

record_type_definition ::= [[abstract] tagged] [limited] record_definition

record_definition ::= record
                  component_list
                  end record
                  | null record

component_list ::= component_item {component_item}
               | {component_item} variant_part
               | null;

component_item ::= component_declaration | aspect_clause

component_declaration ::= defining_identifier_list : component_definition [:= default_expression]
                      [aspect_specification];

variant_part ::= case discriminant__direct_name is
             variant_
             {variant_}
             end case;

variant_ ::= when discrete_choice_list =>
        component_list

discrete_choice_list ::= discrete_choice {| discrete_choice}

discrete_choice ::= choice_expression | discrete__subtype_indication | range_ | others

record_extension_part ::= with record_definition

abstract_subprogram_declaration ::= [overriding_indicator]
                                subprogram_specification is abstract
                                [aspect_specification];

interface_type_definition ::= [limited | task | protected | synchronized] interface [and interface_list]

interface_list ::= interface__subtype_mark {and interface__subtype_mark}

access_type_definition ::= [null_exclusion] access_to_object_definition
                       | [null_exclusion] access_to_subprogram_definition

access_to_object_definition ::= access [general_access_modifier] subtype_indication

general_access_modifier ::= all | constant

access_to_subprogram_definition ::= access [protected] procedure parameter_profile
                                | access [protected] function parameter_and_result_profile

null_exclusion ::= not null

access_definition ::= [null_exclusion] access [constant] subtype_mark
                  | [null_exclusion] access [protected] procedure parameter_profile
                  | [null_exclusion] access [protected] function parameter_and_result_profile

incomplete_type_declaration ::= type defining_identifier [discriminant_part] [is tagged];

declarative_part ::= {declarative_item}

declarative_item ::= basic_declarative_item | body

basic_declarative_item ::= basic_declaration | aspect_clause | use_clause

body_ ::= proper_body | body_stub

proper_body ::= subprogram_body | package_body | task_body | protected_body

name_ ::= direct_name
     | indexed_component
     | selected_component
     | type_conversion
     | character_literal
     | generalized_reference
     | explicit_dereference
     | slice_
     | attribute_reference
     | function_call
     | qualified_expression
     | generalized_indexing

direct_name ::= identifier_ | operator_symbol

prefix_ ::= name_ | implicit_dereference

explicit_dereference ::= name_.all

implicit_dereference ::= name_

indexed_component ::= prefix_ (expression_ {, expression_})

slice_ ::= prefix_ (discrete_range)

selected_component ::= prefix_ . selector_name

selector_name ::= identifier_ | character_literal | operator_symbol

attribute_reference ::= prefix_ ' attribute_designator

attribute_designator ::= identifier_ [(static__expression)]
                     | Access | Delta | Digits | Mod

range_attribute_reference ::= prefix_ ' range_attribute_designator

range_attribute_designator ::= Range[(static__expression)]

generalized_reference ::= reference_object__name

generalized_indexing ::= indexable_container_object__prefix actual_parameter_part

aggregate_ ::= record_aggregate | extension_aggregate | array_aggregate

record_aggregate ::= (record_component_association_list)

record_component_association_list ::=
                                  record_component_association {, record_component_association}
                                  | null record

record_component_association ::=
                             [component_choice_list =>] expression_
                             | component_choice_list => <>

component_choice_list ::=
                      component__selector_name {| component__selector_name}
                      | others

extension_aggregate ::=
                    (ancestor_part with record_component_association_list)

ancestor_part ::= expression_ | subtype_mark

array_aggregate ::=
                positional_array_aggregate | named_array_aggregate

positional_array_aggregate ::=
                           (expression_ , expression_ {, expression_})
                           | (expression_ {, expression_}, others => expression_)
                           | (expression_ {, expression_}, others => <>)

named_array_aggregate ::=
                      (array_component_association {, array_component_association})

array_component_association ::=
                            discrete_choice_list => expression_
                            | discrete_choice_list => <>

expression_ ::=
           relation_ {and relation_}
           | relation_ {or relation_}
           | relation_ {xor relation_}
           | relation_ {and then relation_}
           | relation_ {or else relation}

choice_expression ::=
                  choice_relation {and choice_relation}
                  | choice_relation {or choice_relation}
                  | choice_relation {xor choice_relation}
                  | choice_relation {and then choice_relation}
                  | choice_relation {or else choice_relation}

choice_relation ::=
                simple_expression [relational_operator simple_expression]
relation_ ::=
         simple_expression [relational_operator simple_expression]
         | simple_expression [not] in membership_choice_list

membership_choice_list ::= membership_choice {| membership_choice}

membership_choice ::= choice_expression | range_ | subtype_mark

simple_expression ::= [unary_adding_operator] term_ {binary_adding_operator term_}

term_ ::= factor_ {multiplying_operator factor_}

factor_ ::= primary_ [** primary_] | abs primary_ | not primary_

primary_  ::=
        numeric_literal | null | string_literal | aggregate_
        | name_ | allocator_ | (expression_)
        | (conditional_expression) | (quantified_expression)

logical_operator ::= and | or | xor

relational_operator ::= = | /= | < | <= | > | >=

binary_adding_operator ::= + | – | &

unary_adding_operator ::= + | –

multiplying_operator ::= * | / | mod | rem

highest_precedence_operator ::= ** | abs | not

conditional_expression ::= if_expression | case_expression

if_expression ::=
              if condition_ then dependent__expression
              {elsif condition_ then dependent__expression}
              [else dependent__expression]

condition_ ::= boolean__expression

case_expression ::=
                case selecting__expression is
                case_expression_alternative {,
                case_expression_alternative}

case_expression_alternative ::=
                            when discrete_choice_list =>
                            dependent__expression

quantified_expression ::= for quantifier_ loop_parameter_specification => predicate_
                      | for quantifier_ iterator_specification => predicate_

quantifier_ ::= all | some

predicate_ ::= boolean__expression

type_conversion ::=
                subtype_mark (expression_)
                | subtype_mark (name_)

qualified_expression ::=
                     subtype_mark '(expression_) | subtype_mark ' aggregate_

allocator_ ::=
          new [subpool_specification] subtype_indication
          | new [subpool_specification] qualified_expression

subpool_specification ::= (subpool_handle__name)

sequence_of_statements ::= statement_ {statement_} {label_}

statement_ ::=
          {label_} simple_statement | {label_} compound_statement

simple_statement ::= null_statement
                 | assignment_statement
                 | goto_statement
                 | simple_return_statement
                 | requeue_statement
                 | abort_statement
                 | code_statement
                 | exit_statement
                 | procedure_call_statement
                 | entry_call_statement
                 | delay_statement
                 | raise_statement

compound_statement ::=
                   if_statement
                   | loop_statement
                   | extended_return_statement
                   | accept_statement
                   | case_statement
                   | block_statement
                   | select_statement

null_statement ::= null;

label_ ::= <<label__statement_identifier >>

statement_identifier ::= direct_name

assignment_statement ::=
                     variable__name := expression_ ;

if_statement ::=
             if condition_ then
             sequence_of_statements
             {elsif condition_ then
             sequence_of_statements}
             [else
             sequence_of_statements]
             end if;

case_statement ::=
               case selecting__expression is
               case_statement_alternative
               {case_statement_alternative}
               end case;

case_statement_alternative ::=
                           when discrete_choice_list =>
                           sequence_of_statements

loop_statement ::=
               [loop__statement_identifier :]
               [iteration_scheme] loop
               sequence_of_statements
               end loop [loop__identifier];

iteration_scheme ::= while condition_
                 | for loop_parameter_specification
                 | for iterator_specification

loop_parameter_specification ::=
                             defining_identifier in [reverse] discrete_subtype_definition
iterator_specification ::=
                       defining_identifier in [reverse] iterator__name
                       | defining_identifier [: subtype_indication] of [reverse] iterable__name
block_statement ::=
                [block__statement_identifier :]
                [declare
                declarative_part]
                begin
                handled_sequence_of_statements
                end [block__identifier];

exit_statement ::=
               exit [loop__name] [when condition_];

goto_statement ::= goto label__name ;

subprogram_declaration ::=
                       [overriding_indicator]
                       subprogram_specification
                       [aspect_specification];

subprogram_specification ::=
                         procedure_specification
                         | function_specification

procedure_specification ::= procedure defining_program_unit_name parameter_profile

function_specification ::= function defining_designator parameter_and_result_profile

designator_ ::= [parent_unit_name .] identifier_ | operator_symbol

defining_designator ::= defining_program_unit_name | defining_operator_symbol

defining_program_unit_name ::= [parent_unit_name .] defining_identifier

operator_symbol ::= string_literal

defining_operator_symbol ::= operator_symbol

parameter_profile ::= [formal_part]

parameter_and_result_profile ::=
                             [formal_part] return [null_exclusion] subtype_mark
                             | [formal_part] return access_definition

formal_part ::=
            (parameter_specification {; parameter_specification})
parameter_specification ::=
                        defining_identifier_list : [aliased] mode_ [null_exclusion] subtype_mark [:= default_expression]
                        | defining_identifier_list : access_definition [:= default_expression]

mode_ ::= [in] | in out | out

subprogram_body ::=
                [overriding_indicator]
                subprogram_specification
                [aspect_specification] is
                declarative_part
                begin
                handled_sequence_of_statements
                end [designator_];

procedure_call_statement ::=
                         procedure__name ;
                         | procedure__prefix actual_parameter_part ;

function_call ::=
              function__name
              | function__prefix actual_parameter_part

actual_parameter_part ::=
                      (parameter_association {, parameter_association})

parameter_association ::=
                      [formal_parameter__selector_name =>] explicit_actual_parameter

explicit_actual_parameter ::= expression_ | variable__name

simple_return_statement ::= return [expression_];

extended_return_object_declaration ::=
                                   defining_identifier : [aliased][constant] return_subtype_indication [:= expression_]

extended_return_statement ::=
                          return extended_return_object_declaration [do
                          handled_sequence_of_statements
                          end return];

return_subtype_indication ::= subtype_indication | access_definition

null_procedure_declaration ::=
                           [overriding_indicator]
                           procedure_specification is null
                           [aspect_specification];

expression_function_declaration ::=
                                [overriding_indicator]
                                function_specification is
                                (expression_)
                                [aspect_specification];

package_declaration ::= package_specification ;

package_specification ::=
                      package defining_program_unit_name
                      [aspect_specification] is
                      {basic_declarative_item}
                      [private
                      {basic_declarative_item}]
                      end [[parent_unit_name .] identifier_]

package_body ::=
             package body defining_program_unit_name
             [aspect_specification] is
             declarative_part
             [begin
             handled_sequence_of_statements]
             end [[parent_unit_name .] identifier_];

private_type_declaration ::=
                         type defining_identifier [discriminant_part] is [[abstract] tagged] [limited] private
                         [aspect_specification];

private_extension_declaration ::=
                              type defining_identifier [discriminant_part] is
                              [abstract] [limited | synchronized] new ancestor__subtype_indication
                              [and interface_list] with private
                              [aspect_specification];

overriding_indicator ::= [not] overriding

use_clause ::= use_package_clause | use_type_clause

use_package_clause ::= use package__name {, package__name};

use_type_clause ::= use [all] type subtype_mark {, subtype_mark};

renaming_declaration ::=
                     object_renaming_declaration
                     | exception_renaming_declaration
                     | package_renaming_declaration
                     | subprogram_renaming_declaration
                     | generic_renaming_declaration

object_renaming_declaration ::=
                            defining_identifier : [null_exclusion] subtype_mark renames object__name
                            [aspect_specification];
                            | defining_identifier : access_definition renames object__name
                            [aspect_specification];

exception_renaming_declaration ::= defining_identifier : exception renames exception__name
                               [aspect_specification];

package_renaming_declaration ::= package defining_program_unit_name renames package__name
                             [aspect_specification];

subprogram_renaming_declaration ::=
                                [overriding_indicator]
                                subprogram_specification renames callable_entity__name
                                [aspect_specification];

generic_renaming_declaration ::=
                             generic package
                             defining_program_unit_name renames generic_package__name
                             [aspect_specification];
                             | generic procedure
                             defining_program_unit_name renames generic_procedure__name
                             [aspect_specification];
                             | generic function
                             defining_program_unit_name renames generic_function__name
                             [aspect_specification];

task_type_declaration ::=
                      task type defining_identifier [known_discriminant_part]
                      [aspect_specification] [is
                      [new interface_list with]
                      task_definition];

single_task_declaration ::=
                        task defining_identifier
                        [aspect_specification][is
                        [new interface_list with]
                        task_definition];

task_definition ::=
                {task_item}
                [private
                {task_item}]
                end [task__identifier]

task_item ::= entry_declaration | aspect_clause

task_body ::=
          task body defining_identifier
          [aspect_specification] is
          declarative_part
          begin
          handled_sequence_of_statements
          end [task__identifier];

protected_type_declaration ::=
                           protected type defining_identifier [known_discriminant_part]
                           [aspect_specification] is
                           [new interface_list with]
                           protected_definition ;

single_protected_declaration ::=
                             protected defining_identifier
                             [aspect_specification] is
                             [new interface_list with]
                             protected_definition ;

protected_definition ::=
                     {protected_operation_declaration}
                     [private
                     {protected_element_declaration}]
                     end [protected__identifier]

protected_operation_declaration ::= subprogram_declaration
                                | entry_declaration
                                | aspect_clause

protected_element_declaration ::= protected_operation_declaration
                              | component_declaration

protected_body ::=
               protected body defining_identifier
               [aspect_specification] is
               {protected_operation_item}
               end [protected__identifier];

protected_operation_item ::= subprogram_declaration
                         | subprogram_body
                         | entry_body
                         | aspect_clause

synchronization_kind ::= By_Entry | By_Protected_Procedure | Optional

entry_declaration ::=
                  [overriding_indicator]
                  entry defining_identifier [(discrete_subtype_definition)] parameter_profile
                  [aspect_specification];

accept_statement ::=
                 accept entry__direct_name [(entry_index)] parameter_profile [do
                 handled_sequence_of_statements
                 end [entry__identifier]];

entry_index ::= expression_

entry_body ::=
           entry defining_identifier entry_body_formal_part entry_barrier is
           declarative_part
           begin
           handled_sequence_of_statements
           end [entry__identifier];

entry_body_formal_part ::= [(entry_index_specification)] parameter_profile

entry_barrier ::= when condition_

entry_index_specification ::= for defining_identifier in discrete_subtype_definition

entry_call_statement ::= entry__name [actual_parameter_part];

requeue_statement ::= requeue procedure_or_entry__name [with abort];

delay_statement ::= delay_until_statement | delay_relative_statement

delay_until_statement ::= delay until delay__expression ;

delay_relative_statement ::= delay delay__expression ;

select_statement ::=
                 selective_accept
                 | timed_entry_call
                 | conditional_entry_call
                 | asynchronous_select

selective_accept ::=
                 select
                 [guard_]
                 select_alternative
                 {or
                 [guard_]
                 select_alternative}
                 [else
                 sequence_of_statements]
                 end select;

guard_ ::= when condition_ =>

select_alternative ::=
                   accept_alternative
                   | delay_alternative
                   | terminate_alternative

accept_alternative ::=
                   accept_statement [sequence_of_statements]

delay_alternative ::=
                  delay_statement [sequence_of_statements]

terminate_alternative ::= terminate;

timed_entry_call ::=
                 select
                 entry_call_alternative
                 or
                 delay_alternative
                 end select;

entry_call_alternative ::=
                       procedure_or_entry_call [sequence_of_statements]

procedure_or_entry_call ::=
                        procedure_call_statement | entry_call_statement

conditional_entry_call ::=
                       select
                       entry_call_alternative
                       else
                       sequence_of_statements
                       end select;

asynchronous_select ::=
                    select
                    triggering_alternative
                    then abort
                    abortable_part
                    end select;

triggering_alternative ::= triggering_statement [sequence_of_statements]

triggering_statement ::= procedure_or_entry_call | delay_statement

abortable_part ::= sequence_of_statements

abort_statement ::= abort task__name {, task__name};

compilation_ ::= {compilation_unit}

compilation_unit ::= context_clause library_item
                 | context_clause subunit_

library_item ::= [private] library_unit_declaration
             | library_unit_body
             | [private] library_unit_renaming_declaration

library_unit_declaration ::=
                         subprogram_declaration
                         | generic_declaration
                         | package_declaration
                         | generic_instantiation

library_unit_renaming_declaration ::=
                                  package_renaming_declaration
                                  | generic_renaming_declaration
                                  | subprogram_renaming_declaration

library_unit_body ::= subprogram_body | package_body

parent_unit_name ::= name_

context_clause ::= {context_item}

context_item ::= with_clause | use_clause

with_clause ::= limited_with_clause | nonlimited_with_clause

limited_with_clause ::= limited [private] with library_unit__name {, library_unit__name};

nonlimited_with_clause ::= [private] with library_unit__name {, library_unit__name};

body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub

subprogram_body_stub ::=
                     [overriding_indicator]
                     subprogram_specification is separate
                     [aspect_specification];

package_body_stub ::=
                  package body defining_identifier is separate
                  [aspect_specification];

task_body_stub ::=
               task body defining_identifier is separate
               [aspect_specification];

protected_body_stub ::=
                    protected body defining_identifier is separate
                    [aspect_specification];

subunit_ ::= separate (parent_unit_name) proper_body

exception_declaration ::= defining_identifier_list : exception
                      [aspect_specification];

handled_sequence_of_statements ::=
                               sequence_of_statements
                               [exception
                               exception_handler
                               {exception_handler}]

exception_handler ::=
                  when [choice_parameter_specification :] exception_choice {| exception_choice} =>
                  sequence_of_statements

choice_parameter_specification ::= defining_identifier

exception_choice ::= exception__name | others

raise_statement ::= raise;
                | raise exception__name [with string__expression];

generic_declaration ::= generic_subprogram_declaration | generic_package_declaration

generic_subprogram_declaration ::=
                               generic_formal_part subprogram_specification
                               [aspect_specification];

generic_package_declaration ::=
                            generic_formal_part package_specification ;

generic_formal_part ::= generic {generic_formal_parameter_declaration | use_clause}

generic_formal_parameter_declaration ::=
                                     formal_object_declaration
                                     | formal_type_declaration
                                     | formal_subprogram_declaration
                                     | formal_package_declaration

generic_instantiation ::=
                      package defining_program_unit_name is
                      new generic_package__name [generic_actual_part]
                      [aspect_specification];
                      | [overriding_indicator]
                      procedure defining_program_unit_name is
                      new generic_procedure__name [generic_actual_part]
                      [aspect_specification];
                      | [overriding_indicator]
                      function defining_designator is
                      new generic_function__name [generic_actual_part]
                      [aspect_specification];

generic_actual_part ::=
                    (generic_association {, generic_association})

generic_association ::=
                    [generic_formal_parameter__selector_name =>] explicit_generic_actual_parameter

explicit_generic_actual_parameter ::= expression | variable__name
                                  | subprogram__name | entry__name | subtype_mark
                                  | package_instance__name

formal_object_declaration ::=
                          defining_identifier_list : mode_ [null_exclusion] subtype_mark [:= default_expression]
                          [aspect_specification];
                          | defining_identifier_list : mode_ access_definition [:= default_expression]
                          [aspect_specification];

formal_type_declaration ::=
                        formal_complete_type_declaration
                        | formal_incomplete_type_declaration

formal_complete_type_declaration ::=
                                 type defining_identifier [discriminant_part] is formal_type_definition
                                 [aspect_specification];

formal_incomplete_type_declaration ::=
                                   type defining_identifier [discriminant_part] [is tagged];

formal_type_definition ::=
                       formal_private_type_definition
                       | formal_derived_type_definition
                       | formal_discrete_type_definition
                       | formal_signed_integer_type_definition
                       | formal_modular_type_definition
                       | formal_floating_point_definition
                       | formal_ordinary_fixed_point_definition
                       | formal_decimal_fixed_point_definition
                       | formal_array_type_definition
                       | formal_access_type_definition
                       | formal_interface_type_definition

formal_private_type_definition ::= [[abstract] tagged] [limited] private

formal_derived_type_definition ::=
                               [abstract] [limited | synchronized] new subtype_mark [[and interface_list]with private]

formal_discrete_type_definition ::= (<>)

formal_signed_integer_type_definition ::= range <>

formal_modular_type_definition ::= mod <>

formal_floating_point_definition ::= digits <>

formal_ordinary_fixed_point_definition ::= delta <>

formal_decimal_fixed_point_definition ::= delta <> digits <>

formal_array_type_definition ::= array_type_definition

formal_access_type_definition ::= access_type_definition

formal_interface_type_definition ::= interface_type_definition

formal_subprogram_declaration ::= formal_concrete_subprogram_declaration
                              | formal_abstract_subprogram_declaration

formal_concrete_subprogram_declaration ::=
                                       with subprogram_specification [is subprogram_default]
                                       [aspect_specification];

formal_abstract_subprogram_declaration ::=
                                       with subprogram_specification is abstract [subprogram_default]
                                       [aspect_specification];

subprogram_default ::= default_name | <> | null

default_name ::= name_

formal_package_declaration ::=
                           with package defining_identifier is new generic_package__name formal_package_actual_part
                           [aspect_specification];

formal_package_actual_part ::=
                           ([others =>] <>)
                           | [generic_actual_part]
                           | (formal_package_association {, formal_package_association} [, others => <>])

formal_package_association ::=
                           generic_association
                           | generic_formal_parameter__selector_name => <>

aspect_clause ::= attribute_definition_clause
              | enumeration_representation_clause
              | record_representation_clause
              | at_clause

local_name ::= direct_name
           | direct_name ' attribute_designator
           | library_unit__name

aspect_specification ::=
                     with aspect_mark [=> aspect_definition] {,
                     aspect_mark [=> aspect_definition]}

aspect_mark ::= aspect__identifier ['Class]

aspect_definition ::= name_ | expression_ | identifier_

attribute_definition_clause ::=
                            for local_name ' attribute_designator use expression_ ;
                            | for local_name ' attribute_designator use name_ ;

enumeration_representation_clause ::=
                                  for first_subtype__local_name use enumeration_aggregate ;

enumeration_aggregate ::= array_aggregate

record_representation_clause ::=
                             for first_subtype__local_name use
                             record [mod_clause]
                             {component_clause}
                             end record;

component_clause ::=
                 component__local_name at position_ range first_bit .. last_bit ;

position_ ::= static__expression

first_bit ::= static__simple_expression

last_bit ::= static__simple_expression

code_statement ::= qualified_expression ;

storage_pool_indicator ::= storage_pool__name | null

restriction_ ::= restriction__identifier
            | restriction_parameter__identifier => restriction_parameter_argument

restriction_parameter_argument ::= name_ | expression_

delta_constraint ::= delta static__expression [range_constraint]

at_clause ::= for direct_name use at expression_ ;

mod_clause ::= at mod static__expression ;