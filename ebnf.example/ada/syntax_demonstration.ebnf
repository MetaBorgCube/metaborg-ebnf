pragma_ ::= pragma_ identifier_ [(pragma_argument_association {, pragma_argument_association})];

pragma_argument_association ::=
                            [pragma_argument_ identifier =>] name_
                            | [pragma_argument_ identifier =>] expression_
                            | pragma_argument_ aspect_mark => name_
                            | pragma_argument_ aspect_mark => expression_

basic_declaration ::=
                  type_declaration
                  | object_declaration
                  | subprogram_declaration
                  | null_procedure_declaration
                  | package_declaration
                  | exception_declaration
                  | generic_instantiation
                  | subtype_declaration
                  | number_declaration
                  | abstract_subprogram_declaration
                  | expression_function_declaration
                  | renaming_declaration
                  | generic_declaration

defining_identifier ::= identifier_

type_declaration ::= full_type_declaration
                 | incomplete_type_declaration
                 | private_type_declaration
                 | private_extension_declaration

full_type_declaration ::=
                      type defining_identifier [known_discriminant_part] is type_definition
                      [aspect_specification];
                      | task_type_declaration
                      | protected_type_declaration

type_definition ::=
                enumeration_type_definition
                | real_type_definition
                | record_type_definition
                | derived_type_definition
                | integer_type_definition
                | array_type_definition
                | access_type_definition
                | interface_type_definition

subtype_declaration ::=
                    subtype defining_identifier is subtype_indication
                    [aspect_specification];
                    
if_expression ::=
              if condition_ then dependent_expression
              {elsif condition then dependent_expression}
              [else dependent_expression]