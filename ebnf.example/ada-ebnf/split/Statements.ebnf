module Statements

sequence_of_statements ::= statement_ {statement_} {label_}

statement_ ::=
          {label_} simple_statement | {label_} compound_statement

simple_statement ::= null_statement
                 | assignment_statement
                 | goto_statement
                 | simple_return_statement
                 | requeue_statement
                 | abort_statement
                 | code_statement
                 | exit_statement
                 | procedure_call_statement
                 | entry_call_statement
                 | delay_statement
                 | raise_statement

compound_statement ::=
                   if_statement
                   | loop_statement
                   | extended_return_statement
                   | accept_statement
                   | case_statement
                   | block_statement
                   | select_statement

null_statement ::= null;

label_ ::= <<label__statement_identifier >>

statement_identifier ::= direct_name

assignment_statement ::=
                     variable__name := expression_ ;

if_statement ::=
             if condition_ then
             sequence_of_statements
             {elsif condition_ then
             sequence_of_statements}
             [else
             sequence_of_statements]
             end if;

case_statement ::=
               case selecting__expression is
               case_statement_alternative
               {case_statement_alternative}
               end case;

case_statement_alternative ::=
                           when discrete_choice_list =>
                           sequence_of_statements

loop_statement ::=
               [loop__statement_identifier :]
               [iteration_scheme] loop
               sequence_of_statements
               end loop [loop__identifier];

iteration_scheme ::= while condition_
                 | for loop_parameter_specification
                 | for iterator_specification

loop_parameter_specification ::=
                             defining_identifier in [reverse] discrete_subtype_definition
iterator_specification ::=
                       defining_identifier in [reverse] iterator__name
                       | defining_identifier [: subtype_indication] of [reverse] iterable__name
block_statement ::=
                [block__statement_identifier :]
                [declare
                declarative_part]
                begin
                handled_sequence_of_statements
                end [block__identifier];

exit_statement ::=
               exit [loop__name] [when condition_];

goto_statement ::= goto label__name ;