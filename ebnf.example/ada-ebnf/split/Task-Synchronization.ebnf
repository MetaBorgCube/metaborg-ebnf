module Tasks-Synchronization

task_type_declaration ::=
                      task type defining_identifier [known_discriminant_part]
                      [aspect_specification] [is
                      [new interface_list with]
                      task_definition];

single_task_declaration ::=
                        task defining_identifier
                        [aspect_specification][is
                        [new interface_list with]
                        task_definition];

task_definition ::=
                {task_item}
                [private
                {task_item}]
                end [task__identifier]

task_item ::= entry_declaration | aspect_clause

task_body ::=
          task body defining_identifier
          [aspect_specification] is
          declarative_part
          begin
          handled_sequence_of_statements
          end [task__identifier];

protected_type_declaration ::=
                           protected type defining_identifier [known_discriminant_part]
                           [aspect_specification] is
                           [new interface_list with]
                           protected_definition ;

single_protected_declaration ::=
                             protected defining_identifier
                             [aspect_specification] is
                             [new interface_list with]
                             protected_definition ;

protected_definition ::=
                     {protected_operation_declaration}
                     [private
                     {protected_element_declaration}]
                     end [protected__identifier]

protected_operation_declaration ::= subprogram_declaration
                                | entry_declaration
                                | aspect_clause

protected_element_declaration ::= protected_operation_declaration
                              | component_declaration

protected_body ::=
               protected body defining_identifier
               [aspect_specification] is
               {protected_operation_item}
               end [protected__identifier];

protected_operation_item ::= subprogram_declaration
                         | subprogram_body
                         | entry_body
                         | aspect_clause

synchronization_kind ::= By_Entry | By_Protected_Procedure | Optional

entry_declaration ::=
                  [overriding_indicator]
                  entry defining_identifier [(discrete_subtype_definition)] parameter_profile
                  [aspect_specification];

accept_statement ::=
                 accept entry__direct_name [(entry_index)] parameter_profile [do
                 handled_sequence_of_statements
                 end [entry__identifier]];

entry_index ::= expression_

entry_body ::=
           entry defining_identifier entry_body_formal_part entry_barrier is
           declarative_part
           begin
           handled_sequence_of_statements
           end [entry__identifier];

entry_body_formal_part ::= [(entry_index_specification)] parameter_profile

entry_barrier ::= when condition_

entry_index_specification ::= for defining_identifier in discrete_subtype_definition

entry_call_statement ::= entry__name [actual_parameter_part];

requeue_statement ::= requeue procedure_or_entry__name [with abort];

delay_statement ::= delay_until_statement | delay_relative_statement

delay_until_statement ::= delay until delay__expression ;

delay_relative_statement ::= delay delay__expression ;

select_statement ::=
                 selective_accept
                 | timed_entry_call
                 | conditional_entry_call
                 | asynchronous_select

selective_accept ::=
                 select
                 [guard_]
                 select_alternative
                 {or
                 [guard_]
                 select_alternative}
                 [else
                 sequence_of_statements]
                 end select;

guard_ ::= when condition_ =>

select_alternative ::=
                   accept_alternative
                   | delay_alternative
                   | terminate_alternative

accept_alternative ::=
                   accept_statement [sequence_of_statements]

delay_alternative ::=
                  delay_statement [sequence_of_statements]

terminate_alternative ::= terminate;

timed_entry_call ::=
                 select
                 entry_call_alternative
                 or
                 delay_alternative
                 end select;

entry_call_alternative ::=
                       procedure_or_entry_call [sequence_of_statements]

procedure_or_entry_call ::=
                        procedure_call_statement | entry_call_statement

conditional_entry_call ::=
                       select
                       entry_call_alternative
                       else
                       sequence_of_statements
                       end select;

asynchronous_select ::=
                    select
                    triggering_alternative
                    then abort
                    abortable_part
                    end select;

triggering_alternative ::= triggering_statement [sequence_of_statements]

triggering_statement ::= procedure_or_entry_call | delay_statement

abortable_part ::= sequence_of_statements

abort_statement ::= abort task__name {, task__name};